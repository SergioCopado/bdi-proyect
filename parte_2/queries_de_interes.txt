#Aquí se añaden las queries que haremos en elasticsearch 

# Obtener información del índice
index_info = client.cat.indices(index="my_index", format='json')

# Comprobamos el número de documentos
for info in index_info:
    if info['index'] == "my_index":
        doc_count = info['docs.count']
        print(f"El número de documentos en el índice  es: {doc_count}")

# Obtener el número total de documentos en el índice
doc_count = client.count(index='my_index')['count']
print(f"El número total de documentos en el índice es: {doc_count}")

# Buscar documentos donde el campo 'title' contenga una palabra clave
query = {
    "query": {
        "match": {
            "title": "Frankenstein"
        }
    }
}
res = client.search(index='my_index', body=query)
for hit in res['hits']['hits']:
    print(hit['_source'])

# Realizar una agregación para contar el número de documentos por 'author_name'
query = {
    "size": 0,
    "aggs": {
        "authors": {
            "terms": {
                "field": "author_name.keyword",
                "size": 10
            }
        }
    }
}
res = client.search(index='my_index', body=query)
for bucket in res['aggregations']['authors']['buckets']:
    print(f"Autor: {bucket['key']}, Número de libros: {bucket['doc_count']}")

# Buscar documentos donde el campo 'ratings' esté dentro de un rango específico
query = {
    "query": {
        "range": {
            "ratings": {
                "gte": 4.0,
                "lte": 5.0
            }
        }
    }
}

# Ejecutar la consulta
res = client.search(index='my_index', body=query)

# Imprimir sólo el autor, el título y los ratings, para que se vea bien si ratings esta correcto
print("Documentos con ratings entre 4.0 y 5.0:")
for hit in res['hits']['hits']:
    source = hit['_source']
    autor = source.get('author_name', 'Autor desconocido')
    titulo = source.get('title', 'Título desconocido')
    ratings = source.get('ratings', 'Ratings desconocidos')
    print(f"Autor: {autor}, Título: {titulo}, Ratings: {ratings}")


# Definir la consulta para obtener los IDs de los documentos
query = {
    "_source": False,  # No necesitamos los datos completos, solo los IDs
    "query": {
        "match_all": {}  # Obtener todos los documentos
    }
}

# Ejecutar la consulta
res = client.search(index='my_index', body=query, size=10000)  # Ajusta el tamaño según sea necesario

# Extraer y mostrar los IDs de los documentos
document_ids = [hit['_id'] for hit in res['hits']['hits']]
print("IDs de los documentos en el índice:")
for doc_id in document_ids:
    print(doc_id)

# Obtener todos los campos únicos de un documento específico
doc_id = 'sbcalY8BjXdby5LXqfvO'  # Reemplaza con el ID del documento
res = client.get(index='my_index', id=doc_id)
print(res['_source'].keys())

# Obtener un documento por su ID
doc_id = 'vbcalY8BjXdby5LXqvs1'  

try:
    res = client.get(index='my_index', id=doc_id)
    
    # Imprimir los campos y sus valores del documento
    print(f"Campos y valores del documento con ID '{doc_id}':")
    for field, value in res['_source'].items():
        print(f"{field}: {value}")
except Exception as e:
    print(f"No se pudo obtener el documento con ID '{doc_id}'. Error: {e}")

# Verificar si el índice existe antes de intentar eliminarlo
if client.indices.exists(index='my_index'):
    # Eliminar el índice
    client.indices.delete(index='my_index')
    print(f"El índice my_index ha sido eliminado.")
else:
    print(f"El índice my_index no existe.")
